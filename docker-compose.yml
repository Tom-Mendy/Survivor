services:
  nextjs:
    build:
      context: ./
      dockerfile: Dockerfile
      target: nextjs
    container_name: nextjs
    ports:
      - "3000:3000"
    depends_on:
      - fastapi
    develop:
      watch:
        - action: sync
          path: ./app
          target: /app/app
        - action: sync
          path: ./components.json
          target: /app/components.json
        - action: sync
          path: ./tailwind.config.js
          target: /app/tailwind.config.js
        - action: sync
          path: ./next.config.js
          target: /app/next.config.js
        - action: sync+restart
          path: ./package.json
          target: /app/package.json
    environment:
      - SESSION_SECRET=${SESSION_SECRET:-secret}
    networks:
      - frontend-backend

  fastapi:
    build:
      context: ./
      dockerfile: Dockerfile
      target: fastapi
    container_name: fastapi
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./api
          target: /app/api
    networks:
      - frontend-backend
      - backend-database

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      DB_HOST: ${DB_HOST}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-database
      - database-monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_ENHANCED_CSFR: 'False'
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - database-monitoring
    volumes:
      - ./config_local.py:/pgadmin4/config_local.py # Important
    attach: false

volumes:
  postgres_data:

networks:
  frontend-backend:
  backend-database:
  database-monitoring:
